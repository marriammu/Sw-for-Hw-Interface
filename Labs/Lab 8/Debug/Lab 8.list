
Lab 8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000494  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08000628  08000628  00010628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000638  08000638  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000638  08000638  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000638  08000638  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000638  08000638  00010638  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800063c  0800063c  0001063c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000640  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  0800066c  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  0800066c  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001d4a  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006d4  00000000  00000000  00021da6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000248  00000000  00000000  00022480  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001f0  00000000  00000000  000226c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bed  00000000  00000000  000228b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001ff9  00000000  00000000  000244a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008119d  00000000  00000000  0002649e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000a763b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000754  00000000  00000000  000a7690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000610 	.word	0x08000610

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000610 	.word	0x08000610

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <UART_EnableClock>:
#include<string.h>
unsigned int* look_up[2][5]={
		                     {GPIOA_MODER,GPIOA_OTYPER,GPIOA_PUPDR,GPIOA_IDR ,GPIOA_ODR},
		                     {GPIOB_MODER,GPIOB_OTYPER,GPIOB_PUPDR,GPIOB_IDR ,GPIOB_ODR}
                            };
void UART_EnableClock(char PinNum){
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	4603      	mov	r3, r0
 80001ec:	71fb      	strb	r3, [r7, #7]
	*(RCC_APB1ENR) |= (0x01 << PinNum);
 80001ee:	4b08      	ldr	r3, [pc, #32]	; (8000210 <UART_EnableClock+0x2c>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	79fa      	ldrb	r2, [r7, #7]
 80001f4:	2101      	movs	r1, #1
 80001f6:	fa01 f202 	lsl.w	r2, r1, r2
 80001fa:	4611      	mov	r1, r2
 80001fc:	4a04      	ldr	r2, [pc, #16]	; (8000210 <UART_EnableClock+0x2c>)
 80001fe:	430b      	orrs	r3, r1
 8000200:	6013      	str	r3, [r2, #0]
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40023840 	.word	0x40023840

08000214 <UART_Init>:

void UART_Init(){
 8000214:	b480      	push	{r7}
 8000216:	af00      	add	r7, sp, #0
	*(USART_CR1)|=(0x01<<13);
 8000218:	4b13      	ldr	r3, [pc, #76]	; (8000268 <UART_Init+0x54>)
 800021a:	681b      	ldr	r3, [r3, #0]
 800021c:	4a12      	ldr	r2, [pc, #72]	; (8000268 <UART_Init+0x54>)
 800021e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000222:	6013      	str	r3, [r2, #0]
	*(USART_BRR)  = 0x683;
 8000224:	4b11      	ldr	r3, [pc, #68]	; (800026c <UART_Init+0x58>)
 8000226:	f240 6283 	movw	r2, #1667	; 0x683
 800022a:	601a      	str	r2, [r3, #0]
	*(USART_CR1) |= (0x01<<3);
 800022c:	4b0e      	ldr	r3, [pc, #56]	; (8000268 <UART_Init+0x54>)
 800022e:	681b      	ldr	r3, [r3, #0]
 8000230:	4a0d      	ldr	r2, [pc, #52]	; (8000268 <UART_Init+0x54>)
 8000232:	f043 0308 	orr.w	r3, r3, #8
 8000236:	6013      	str	r3, [r2, #0]
	*(USART_CR1) &= ~(0x01<<15);
 8000238:	4b0b      	ldr	r3, [pc, #44]	; (8000268 <UART_Init+0x54>)
 800023a:	681b      	ldr	r3, [r3, #0]
 800023c:	4a0a      	ldr	r2, [pc, #40]	; (8000268 <UART_Init+0x54>)
 800023e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000242:	6013      	str	r3, [r2, #0]
	*(USART_CR1) &= ~(0x01<<12);
 8000244:	4b08      	ldr	r3, [pc, #32]	; (8000268 <UART_Init+0x54>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a07      	ldr	r2, [pc, #28]	; (8000268 <UART_Init+0x54>)
 800024a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800024e:	6013      	str	r3, [r2, #0]

	*(USART_CR2) &= ~(0x01<<12);
 8000250:	4b07      	ldr	r3, [pc, #28]	; (8000270 <UART_Init+0x5c>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a06      	ldr	r2, [pc, #24]	; (8000270 <UART_Init+0x5c>)
 8000256:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800025a:	6013      	str	r3, [r2, #0]

	}
 800025c:	bf00      	nop
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	4000440c 	.word	0x4000440c
 800026c:	40004408 	.word	0x40004408
 8000270:	40004410 	.word	0x40004410

08000274 <UART_Transmit>:
void UART_Transmit( char * str){
 8000274:	b580      	push	{r7, lr}
 8000276:	b084      	sub	sp, #16
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]
//	char TC = (*USART_SR &(0x01<<0x06));
for (int i=0;i<strlen(str);i++)
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	e00f      	b.n	80002a2 <UART_Transmit+0x2e>
{
	*(USART_DR) = str[i];
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	687a      	ldr	r2, [r7, #4]
 8000286:	4413      	add	r3, r2
 8000288:	781a      	ldrb	r2, [r3, #0]
 800028a:	4b0c      	ldr	r3, [pc, #48]	; (80002bc <UART_Transmit+0x48>)
 800028c:	601a      	str	r2, [r3, #0]
while (((*(USART_SR)>>6)&1) ==0)
 800028e:	bf00      	nop
 8000290:	4b0b      	ldr	r3, [pc, #44]	; (80002c0 <UART_Transmit+0x4c>)
 8000292:	681b      	ldr	r3, [r3, #0]
 8000294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000298:	2b00      	cmp	r3, #0
 800029a:	d0f9      	beq.n	8000290 <UART_Transmit+0x1c>
for (int i=0;i<strlen(str);i++)
 800029c:	68fb      	ldr	r3, [r7, #12]
 800029e:	3301      	adds	r3, #1
 80002a0:	60fb      	str	r3, [r7, #12]
 80002a2:	6878      	ldr	r0, [r7, #4]
 80002a4:	f7ff ff96 	bl	80001d4 <strlen>
 80002a8:	4602      	mov	r2, r0
 80002aa:	68fb      	ldr	r3, [r7, #12]
 80002ac:	429a      	cmp	r2, r3
 80002ae:	d8e8      	bhi.n	8000282 <UART_Transmit+0xe>
{}
}}
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40004404 	.word	0x40004404
 80002c0:	40004400 	.word	0x40004400

080002c4 <GPIO_EnableClock>:
 void Pending_REG(char PinNum)
 {
	 *(EXTI_PR)|=(0x01<<PinNum);
 }

 void GPIO_EnableClock(char PortID) {
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	4603      	mov	r3, r0
 80002cc:	71fb      	strb	r3, [r7, #7]
 	if (PortID==0)
 80002ce:	79fb      	ldrb	r3, [r7, #7]
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d105      	bne.n	80002e0 <GPIO_EnableClock+0x1c>
 	{
 //	*((unsigned int *) 0x40023830) |= (0x01 << 0);
 	*( GPIO_RCCENR) |= (0x01 << 0);
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <GPIO_EnableClock+0x3c>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a09      	ldr	r2, [pc, #36]	; (8000300 <GPIO_EnableClock+0x3c>)
 80002da:	f043 0301 	orr.w	r3, r3, #1
 80002de:	6013      	str	r3, [r2, #0]
 	}
 	if (PortID==1)
 80002e0:	79fb      	ldrb	r3, [r7, #7]
 80002e2:	2b01      	cmp	r3, #1
 80002e4:	d105      	bne.n	80002f2 <GPIO_EnableClock+0x2e>
 	{
 //	*((unsigned int *)  0x40023830) |= (0x01 << 1);
 	*( GPIO_RCCENR) |= (0x01 << 1);
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <GPIO_EnableClock+0x3c>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	4a05      	ldr	r2, [pc, #20]	; (8000300 <GPIO_EnableClock+0x3c>)
 80002ec:	f043 0302 	orr.w	r3, r3, #2
 80002f0:	6013      	str	r3, [r2, #0]
 	}
 }
 80002f2:	bf00      	nop
 80002f4:	370c      	adds	r7, #12
 80002f6:	46bd      	mov	sp, r7
 80002f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002fc:	4770      	bx	lr
 80002fe:	bf00      	nop
 8000300:	40023830 	.word	0x40023830

08000304 <GPIO_Init>:
void GPIO_Init(unsigned char PortID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000304:	b490      	push	{r4, r7}
 8000306:	b082      	sub	sp, #8
 8000308:	af00      	add	r7, sp, #0
 800030a:	4604      	mov	r4, r0
 800030c:	4608      	mov	r0, r1
 800030e:	4611      	mov	r1, r2
 8000310:	461a      	mov	r2, r3
 8000312:	4623      	mov	r3, r4
 8000314:	71fb      	strb	r3, [r7, #7]
 8000316:	4603      	mov	r3, r0
 8000318:	71bb      	strb	r3, [r7, #6]
 800031a:	460b      	mov	r3, r1
 800031c:	717b      	strb	r3, [r7, #5]
 800031e:	4613      	mov	r3, r2
 8000320:	713b      	strb	r3, [r7, #4]
	*(look_up[PortID][0]) &= ~(0x03 << 2 * PinNum);
 8000322:	79fa      	ldrb	r2, [r7, #7]
 8000324:	4956      	ldr	r1, [pc, #344]	; (8000480 <GPIO_Init+0x17c>)
 8000326:	4613      	mov	r3, r2
 8000328:	009b      	lsls	r3, r3, #2
 800032a:	4413      	add	r3, r2
 800032c:	009b      	lsls	r3, r3, #2
 800032e:	440b      	add	r3, r1
 8000330:	681b      	ldr	r3, [r3, #0]
 8000332:	6819      	ldr	r1, [r3, #0]
 8000334:	79bb      	ldrb	r3, [r7, #6]
 8000336:	005b      	lsls	r3, r3, #1
 8000338:	2203      	movs	r2, #3
 800033a:	fa02 f303 	lsl.w	r3, r2, r3
 800033e:	43db      	mvns	r3, r3
 8000340:	461c      	mov	r4, r3
 8000342:	79fa      	ldrb	r2, [r7, #7]
 8000344:	484e      	ldr	r0, [pc, #312]	; (8000480 <GPIO_Init+0x17c>)
 8000346:	4613      	mov	r3, r2
 8000348:	009b      	lsls	r3, r3, #2
 800034a:	4413      	add	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	4403      	add	r3, r0
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	ea01 0204 	and.w	r2, r1, r4
 8000356:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][0]) |= PinMode << 2 * PinNum;
 8000358:	79fa      	ldrb	r2, [r7, #7]
 800035a:	4949      	ldr	r1, [pc, #292]	; (8000480 <GPIO_Init+0x17c>)
 800035c:	4613      	mov	r3, r2
 800035e:	009b      	lsls	r3, r3, #2
 8000360:	4413      	add	r3, r2
 8000362:	009b      	lsls	r3, r3, #2
 8000364:	440b      	add	r3, r1
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	6819      	ldr	r1, [r3, #0]
 800036a:	797a      	ldrb	r2, [r7, #5]
 800036c:	79bb      	ldrb	r3, [r7, #6]
 800036e:	005b      	lsls	r3, r3, #1
 8000370:	fa02 f303 	lsl.w	r3, r2, r3
 8000374:	461c      	mov	r4, r3
 8000376:	79fa      	ldrb	r2, [r7, #7]
 8000378:	4841      	ldr	r0, [pc, #260]	; (8000480 <GPIO_Init+0x17c>)
 800037a:	4613      	mov	r3, r2
 800037c:	009b      	lsls	r3, r3, #2
 800037e:	4413      	add	r3, r2
 8000380:	009b      	lsls	r3, r3, #2
 8000382:	4403      	add	r3, r0
 8000384:	681b      	ldr	r3, [r3, #0]
 8000386:	ea41 0204 	orr.w	r2, r1, r4
 800038a:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][1]) &= ~(1 << PinNum);
 800038c:	79fa      	ldrb	r2, [r7, #7]
 800038e:	493c      	ldr	r1, [pc, #240]	; (8000480 <GPIO_Init+0x17c>)
 8000390:	4613      	mov	r3, r2
 8000392:	009b      	lsls	r3, r3, #2
 8000394:	4413      	add	r3, r2
 8000396:	009b      	lsls	r3, r3, #2
 8000398:	440b      	add	r3, r1
 800039a:	3304      	adds	r3, #4
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	6819      	ldr	r1, [r3, #0]
 80003a0:	79bb      	ldrb	r3, [r7, #6]
 80003a2:	2201      	movs	r2, #1
 80003a4:	fa02 f303 	lsl.w	r3, r2, r3
 80003a8:	43db      	mvns	r3, r3
 80003aa:	461c      	mov	r4, r3
 80003ac:	79fa      	ldrb	r2, [r7, #7]
 80003ae:	4834      	ldr	r0, [pc, #208]	; (8000480 <GPIO_Init+0x17c>)
 80003b0:	4613      	mov	r3, r2
 80003b2:	009b      	lsls	r3, r3, #2
 80003b4:	4413      	add	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4403      	add	r3, r0
 80003ba:	3304      	adds	r3, #4
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	ea01 0204 	and.w	r2, r1, r4
 80003c2:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][1])|= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80003c4:	79fa      	ldrb	r2, [r7, #7]
 80003c6:	492e      	ldr	r1, [pc, #184]	; (8000480 <GPIO_Init+0x17c>)
 80003c8:	4613      	mov	r3, r2
 80003ca:	009b      	lsls	r3, r3, #2
 80003cc:	4413      	add	r3, r2
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	440b      	add	r3, r1
 80003d2:	3304      	adds	r3, #4
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	6819      	ldr	r1, [r3, #0]
 80003d8:	793b      	ldrb	r3, [r7, #4]
 80003da:	f003 0201 	and.w	r2, r3, #1
 80003de:	79bb      	ldrb	r3, [r7, #6]
 80003e0:	fa02 f303 	lsl.w	r3, r2, r3
 80003e4:	461c      	mov	r4, r3
 80003e6:	79fa      	ldrb	r2, [r7, #7]
 80003e8:	4825      	ldr	r0, [pc, #148]	; (8000480 <GPIO_Init+0x17c>)
 80003ea:	4613      	mov	r3, r2
 80003ec:	009b      	lsls	r3, r3, #2
 80003ee:	4413      	add	r3, r2
 80003f0:	009b      	lsls	r3, r3, #2
 80003f2:	4403      	add	r3, r0
 80003f4:	3304      	adds	r3, #4
 80003f6:	681b      	ldr	r3, [r3, #0]
 80003f8:	ea41 0204 	orr.w	r2, r1, r4
 80003fc:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][2]) &= ~(0x03 << 2 * PinNum);
 80003fe:	79fa      	ldrb	r2, [r7, #7]
 8000400:	491f      	ldr	r1, [pc, #124]	; (8000480 <GPIO_Init+0x17c>)
 8000402:	4613      	mov	r3, r2
 8000404:	009b      	lsls	r3, r3, #2
 8000406:	4413      	add	r3, r2
 8000408:	009b      	lsls	r3, r3, #2
 800040a:	440b      	add	r3, r1
 800040c:	3308      	adds	r3, #8
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	6819      	ldr	r1, [r3, #0]
 8000412:	79bb      	ldrb	r3, [r7, #6]
 8000414:	005b      	lsls	r3, r3, #1
 8000416:	2203      	movs	r2, #3
 8000418:	fa02 f303 	lsl.w	r3, r2, r3
 800041c:	43db      	mvns	r3, r3
 800041e:	461c      	mov	r4, r3
 8000420:	79fa      	ldrb	r2, [r7, #7]
 8000422:	4817      	ldr	r0, [pc, #92]	; (8000480 <GPIO_Init+0x17c>)
 8000424:	4613      	mov	r3, r2
 8000426:	009b      	lsls	r3, r3, #2
 8000428:	4413      	add	r3, r2
 800042a:	009b      	lsls	r3, r3, #2
 800042c:	4403      	add	r3, r0
 800042e:	3308      	adds	r3, #8
 8000430:	681b      	ldr	r3, [r3, #0]
 8000432:	ea01 0204 	and.w	r2, r1, r4
 8000436:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][2]) |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 8000438:	79fa      	ldrb	r2, [r7, #7]
 800043a:	4911      	ldr	r1, [pc, #68]	; (8000480 <GPIO_Init+0x17c>)
 800043c:	4613      	mov	r3, r2
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	4413      	add	r3, r2
 8000442:	009b      	lsls	r3, r3, #2
 8000444:	440b      	add	r3, r1
 8000446:	3308      	adds	r3, #8
 8000448:	681b      	ldr	r3, [r3, #0]
 800044a:	6819      	ldr	r1, [r3, #0]
 800044c:	793b      	ldrb	r3, [r7, #4]
 800044e:	105b      	asrs	r3, r3, #1
 8000450:	f003 0203 	and.w	r2, r3, #3
 8000454:	79bb      	ldrb	r3, [r7, #6]
 8000456:	005b      	lsls	r3, r3, #1
 8000458:	fa02 f303 	lsl.w	r3, r2, r3
 800045c:	461c      	mov	r4, r3
 800045e:	79fa      	ldrb	r2, [r7, #7]
 8000460:	4807      	ldr	r0, [pc, #28]	; (8000480 <GPIO_Init+0x17c>)
 8000462:	4613      	mov	r3, r2
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	4413      	add	r3, r2
 8000468:	009b      	lsls	r3, r3, #2
 800046a:	4403      	add	r3, r0
 800046c:	3308      	adds	r3, #8
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	ea41 0204 	orr.w	r2, r1, r4
 8000474:	601a      	str	r2, [r3, #0]
}
 8000476:	bf00      	nop
 8000478:	3708      	adds	r7, #8
 800047a:	46bd      	mov	sp, r7
 800047c:	bc90      	pop	{r4, r7}
 800047e:	4770      	bx	lr
 8000480:	20000000 	.word	0x20000000

08000484 <GPIO_Alternate>:
void GPIO_Alternate(){
 8000484:	b480      	push	{r7}
 8000486:	af00      	add	r7, sp, #0
	*(GPIOA_Alternate) |=(0x07<< 2*4);
 8000488:	4b05      	ldr	r3, [pc, #20]	; (80004a0 <GPIO_Alternate+0x1c>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a04      	ldr	r2, [pc, #16]	; (80004a0 <GPIO_Alternate+0x1c>)
 800048e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8000492:	6013      	str	r3, [r2, #0]
}
 8000494:	bf00      	nop
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	40020020 	.word	0x40020020

080004a4 <main>:
#include "Peripherals.h"

int main(void){
 80004a4:	b580      	push	{r7, lr}
 80004a6:	af00      	add	r7, sp, #0
	 GPIO_EnableClock(0);
 80004a8:	2000      	movs	r0, #0
 80004aa:	f7ff ff0b 	bl	80002c4 <GPIO_EnableClock>
	  GPIO_Init(0,2, ALTERNATE_FUN ,PUSH_PULL);
 80004ae:	2300      	movs	r3, #0
 80004b0:	2202      	movs	r2, #2
 80004b2:	2102      	movs	r1, #2
 80004b4:	2000      	movs	r0, #0
 80004b6:	f7ff ff25 	bl	8000304 <GPIO_Init>
	  GPIO_Alternate();
 80004ba:	f7ff ffe3 	bl	8000484 <GPIO_Alternate>
	  UART_EnableClock(17);
 80004be:	2011      	movs	r0, #17
 80004c0:	f7ff fe90 	bl	80001e4 <UART_EnableClock>
	  UART_Init();
 80004c4:	f7ff fea6 	bl	8000214 <UART_Init>
	  UART_Transmit("Hello World!");
 80004c8:	4801      	ldr	r0, [pc, #4]	; (80004d0 <main+0x2c>)
 80004ca:	f7ff fed3 	bl	8000274 <UART_Transmit>
	while(1){}
 80004ce:	e7fe      	b.n	80004ce <main+0x2a>
 80004d0:	08000628 	.word	0x08000628

080004d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004d4:	b480      	push	{r7}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004d8:	e7fe      	b.n	80004d8 <NMI_Handler+0x4>

080004da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004da:	b480      	push	{r7}
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004de:	e7fe      	b.n	80004de <HardFault_Handler+0x4>

080004e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004e0:	b480      	push	{r7}
 80004e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80004e4:	e7fe      	b.n	80004e4 <MemManage_Handler+0x4>

080004e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80004e6:	b480      	push	{r7}
 80004e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80004ea:	e7fe      	b.n	80004ea <BusFault_Handler+0x4>

080004ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80004ec:	b480      	push	{r7}
 80004ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80004f0:	e7fe      	b.n	80004f0 <UsageFault_Handler+0x4>

080004f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80004f2:	b480      	push	{r7}
 80004f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80004f6:	bf00      	nop
 80004f8:	46bd      	mov	sp, r7
 80004fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004fe:	4770      	bx	lr

08000500 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000500:	b480      	push	{r7}
 8000502:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr

0800050e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000520:	f000 f83e 	bl	80005a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000524:	bf00      	nop
 8000526:	bd80      	pop	{r7, pc}

08000528 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800052c:	4b06      	ldr	r3, [pc, #24]	; (8000548 <SystemInit+0x20>)
 800052e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000532:	4a05      	ldr	r2, [pc, #20]	; (8000548 <SystemInit+0x20>)
 8000534:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000538:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr
 8000546:	bf00      	nop
 8000548:	e000ed00 	.word	0xe000ed00

0800054c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800054c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000584 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000550:	480d      	ldr	r0, [pc, #52]	; (8000588 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000552:	490e      	ldr	r1, [pc, #56]	; (800058c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000556:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000558:	e002      	b.n	8000560 <LoopCopyDataInit>

0800055a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800055a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800055c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800055e:	3304      	adds	r3, #4

08000560 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000560:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000562:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000564:	d3f9      	bcc.n	800055a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000566:	4a0b      	ldr	r2, [pc, #44]	; (8000594 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000568:	4c0b      	ldr	r4, [pc, #44]	; (8000598 <LoopFillZerobss+0x26>)
  movs r3, #0
 800056a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800056c:	e001      	b.n	8000572 <LoopFillZerobss>

0800056e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800056e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000570:	3204      	adds	r2, #4

08000572 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000572:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000574:	d3fb      	bcc.n	800056e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000576:	f7ff ffd7 	bl	8000528 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800057a:	f000 f825 	bl	80005c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800057e:	f7ff ff91 	bl	80004a4 <main>
  bx  lr    
 8000582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000584:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000588:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800058c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8000590:	08000640 	.word	0x08000640
  ldr r2, =_sbss
 8000594:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8000598:	2000004c 	.word	0x2000004c

0800059c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800059c:	e7fe      	b.n	800059c <ADC_IRQHandler>
	...

080005a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <HAL_IncTick+0x20>)
 80005a6:	781b      	ldrb	r3, [r3, #0]
 80005a8:	461a      	mov	r2, r3
 80005aa:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <HAL_IncTick+0x24>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	4413      	add	r3, r2
 80005b0:	4a04      	ldr	r2, [pc, #16]	; (80005c4 <HAL_IncTick+0x24>)
 80005b2:	6013      	str	r3, [r2, #0]
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop
 80005c0:	20000028 	.word	0x20000028
 80005c4:	20000048 	.word	0x20000048

080005c8 <__libc_init_array>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	4d0d      	ldr	r5, [pc, #52]	; (8000600 <__libc_init_array+0x38>)
 80005cc:	4c0d      	ldr	r4, [pc, #52]	; (8000604 <__libc_init_array+0x3c>)
 80005ce:	1b64      	subs	r4, r4, r5
 80005d0:	10a4      	asrs	r4, r4, #2
 80005d2:	2600      	movs	r6, #0
 80005d4:	42a6      	cmp	r6, r4
 80005d6:	d109      	bne.n	80005ec <__libc_init_array+0x24>
 80005d8:	4d0b      	ldr	r5, [pc, #44]	; (8000608 <__libc_init_array+0x40>)
 80005da:	4c0c      	ldr	r4, [pc, #48]	; (800060c <__libc_init_array+0x44>)
 80005dc:	f000 f818 	bl	8000610 <_init>
 80005e0:	1b64      	subs	r4, r4, r5
 80005e2:	10a4      	asrs	r4, r4, #2
 80005e4:	2600      	movs	r6, #0
 80005e6:	42a6      	cmp	r6, r4
 80005e8:	d105      	bne.n	80005f6 <__libc_init_array+0x2e>
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80005f0:	4798      	blx	r3
 80005f2:	3601      	adds	r6, #1
 80005f4:	e7ee      	b.n	80005d4 <__libc_init_array+0xc>
 80005f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80005fa:	4798      	blx	r3
 80005fc:	3601      	adds	r6, #1
 80005fe:	e7f2      	b.n	80005e6 <__libc_init_array+0x1e>
 8000600:	08000638 	.word	0x08000638
 8000604:	08000638 	.word	0x08000638
 8000608:	08000638 	.word	0x08000638
 800060c:	0800063c 	.word	0x0800063c

08000610 <_init>:
 8000610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000612:	bf00      	nop
 8000614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000616:	bc08      	pop	{r3}
 8000618:	469e      	mov	lr, r3
 800061a:	4770      	bx	lr

0800061c <_fini>:
 800061c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800061e:	bf00      	nop
 8000620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000622:	bc08      	pop	{r3}
 8000624:	469e      	mov	lr, r3
 8000626:	4770      	bx	lr
