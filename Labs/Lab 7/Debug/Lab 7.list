
Lab 7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000004cc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000660  08000660  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000660  08000660  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08000660  08000660  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000660  08000660  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000660  08000660  00010660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000664  08000664  00010664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08000668  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000002c  08000694  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000004c  08000694  0002004c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001614  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000065b  00000000  00000000  00021670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000238  00000000  00000000  00021cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001e0  00000000  00000000  00021f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e1dc  00000000  00000000  000220e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000231d  00000000  00000000  000302c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007dead  00000000  00000000  000325e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000b048e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000070c  00000000  00000000  000b04e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000002c 	.word	0x2000002c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000648 	.word	0x08000648

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000030 	.word	0x20000030
 80001d0:	08000648 	.word	0x08000648

080001d4 <GPIO_EnableClock>:
unsigned int* look_up[2][5]={
		                     {GPIOA_MODER,GPIOA_OTYPER,GPIOA_PUPDR,GPIOA_IDR ,GPIOA_ODR},
		                     {GPIOB_MODER,GPIOB_OTYPER,GPIOB_PUPDR,GPIOB_IDR ,GPIOB_ODR}
                            };

void GPIO_EnableClock(char PortID) {
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	if (PortID==0)
 80001de:	79fb      	ldrb	r3, [r7, #7]
 80001e0:	2b00      	cmp	r3, #0
 80001e2:	d105      	bne.n	80001f0 <GPIO_EnableClock+0x1c>
	{
//	*((unsigned int *) 0x40023830) |= (0x01 << 0);
	*( GPIO_RCCENR) |= (0x01 << 0);
 80001e4:	4b0a      	ldr	r3, [pc, #40]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a09      	ldr	r2, [pc, #36]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001ea:	f043 0301 	orr.w	r3, r3, #1
 80001ee:	6013      	str	r3, [r2, #0]
	}
	if (PortID==1)
 80001f0:	79fb      	ldrb	r3, [r7, #7]
 80001f2:	2b01      	cmp	r3, #1
 80001f4:	d105      	bne.n	8000202 <GPIO_EnableClock+0x2e>
	{
//	*((unsigned int *)  0x40023830) |= (0x01 << 1);
	*( GPIO_RCCENR) |= (0x01 << 1);
 80001f6:	4b06      	ldr	r3, [pc, #24]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	4a05      	ldr	r2, [pc, #20]	; (8000210 <GPIO_EnableClock+0x3c>)
 80001fc:	f043 0302 	orr.w	r3, r3, #2
 8000200:	6013      	str	r3, [r2, #0]
	}
}
 8000202:	bf00      	nop
 8000204:	370c      	adds	r7, #12
 8000206:	46bd      	mov	sp, r7
 8000208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800020c:	4770      	bx	lr
 800020e:	bf00      	nop
 8000210:	40023830 	.word	0x40023830

08000214 <SYSCFG_clock>:
void SYSCFG_clock(char PinNum) {
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	4603      	mov	r3, r0
 800021c:	71fb      	strb	r3, [r7, #7]

//	*((unsigned int *) 0x40023830) |= (0x01 << 0);
	*( RCC_APB2ENR) |= (0x01 << PinNum);
 800021e:	4b08      	ldr	r3, [pc, #32]	; (8000240 <SYSCFG_clock+0x2c>)
 8000220:	681b      	ldr	r3, [r3, #0]
 8000222:	79fa      	ldrb	r2, [r7, #7]
 8000224:	2101      	movs	r1, #1
 8000226:	fa01 f202 	lsl.w	r2, r1, r2
 800022a:	4611      	mov	r1, r2
 800022c:	4a04      	ldr	r2, [pc, #16]	; (8000240 <SYSCFG_clock+0x2c>)
 800022e:	430b      	orrs	r3, r1
 8000230:	6013      	str	r3, [r2, #0]
}
 8000232:	bf00      	nop
 8000234:	370c      	adds	r7, #12
 8000236:	46bd      	mov	sp, r7
 8000238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023c:	4770      	bx	lr
 800023e:	bf00      	nop
 8000240:	40023844 	.word	0x40023844

08000244 <Enable_External_Interrupt>:
 void Enable_External_Interrupt(char PinNum){
 8000244:	b480      	push	{r7}
 8000246:	b083      	sub	sp, #12
 8000248:	af00      	add	r7, sp, #0
 800024a:	4603      	mov	r3, r0
 800024c:	71fb      	strb	r3, [r7, #7]

	*(SYSCFG_EXTICR1) &= ~(0x0F<<(PinNum*4));
 800024e:	4b09      	ldr	r3, [pc, #36]	; (8000274 <Enable_External_Interrupt+0x30>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	79fa      	ldrb	r2, [r7, #7]
 8000254:	0092      	lsls	r2, r2, #2
 8000256:	210f      	movs	r1, #15
 8000258:	fa01 f202 	lsl.w	r2, r1, r2
 800025c:	43d2      	mvns	r2, r2
 800025e:	4611      	mov	r1, r2
 8000260:	4a04      	ldr	r2, [pc, #16]	; (8000274 <Enable_External_Interrupt+0x30>)
 8000262:	400b      	ands	r3, r1
 8000264:	6013      	str	r3, [r2, #0]
 }
 8000266:	bf00      	nop
 8000268:	370c      	adds	r7, #12
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	40013808 	.word	0x40013808

08000278 <Interrupt_Mask_REG>:
 void Interrupt_Mask_REG(char PinNum){
 8000278:	b480      	push	{r7}
 800027a:	b083      	sub	sp, #12
 800027c:	af00      	add	r7, sp, #0
 800027e:	4603      	mov	r3, r0
 8000280:	71fb      	strb	r3, [r7, #7]
	 *(EXTI_IMR) |=(0x01<<PinNum);
 8000282:	4b08      	ldr	r3, [pc, #32]	; (80002a4 <Interrupt_Mask_REG+0x2c>)
 8000284:	681b      	ldr	r3, [r3, #0]
 8000286:	79fa      	ldrb	r2, [r7, #7]
 8000288:	2101      	movs	r1, #1
 800028a:	fa01 f202 	lsl.w	r2, r1, r2
 800028e:	4611      	mov	r1, r2
 8000290:	4a04      	ldr	r2, [pc, #16]	; (80002a4 <Interrupt_Mask_REG+0x2c>)
 8000292:	430b      	orrs	r3, r1
 8000294:	6013      	str	r3, [r2, #0]
 }
 8000296:	bf00      	nop
 8000298:	370c      	adds	r7, #12
 800029a:	46bd      	mov	sp, r7
 800029c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	40013c00 	.word	0x40013c00

080002a8 <Falling_Edge>:
 void Falling_Edge(char PinNum)
 {
 80002a8:	b480      	push	{r7}
 80002aa:	b083      	sub	sp, #12
 80002ac:	af00      	add	r7, sp, #0
 80002ae:	4603      	mov	r3, r0
 80002b0:	71fb      	strb	r3, [r7, #7]
	 *(EXTI_FTSR) |=(0x01<<PinNum);
 80002b2:	4b08      	ldr	r3, [pc, #32]	; (80002d4 <Falling_Edge+0x2c>)
 80002b4:	681b      	ldr	r3, [r3, #0]
 80002b6:	79fa      	ldrb	r2, [r7, #7]
 80002b8:	2101      	movs	r1, #1
 80002ba:	fa01 f202 	lsl.w	r2, r1, r2
 80002be:	4611      	mov	r1, r2
 80002c0:	4a04      	ldr	r2, [pc, #16]	; (80002d4 <Falling_Edge+0x2c>)
 80002c2:	430b      	orrs	r3, r1
 80002c4:	6013      	str	r3, [r2, #0]
 }
 80002c6:	bf00      	nop
 80002c8:	370c      	adds	r7, #12
 80002ca:	46bd      	mov	sp, r7
 80002cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d0:	4770      	bx	lr
 80002d2:	bf00      	nop
 80002d4:	40013c0c 	.word	0x40013c0c

080002d8 <NVIC_INPUT>:
 void NVIC_INPUT()
 {
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
	 *(NVIC_ISER)|=(0x01<<0x06);
 80002dc:	4b05      	ldr	r3, [pc, #20]	; (80002f4 <NVIC_INPUT+0x1c>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a04      	ldr	r2, [pc, #16]	; (80002f4 <NVIC_INPUT+0x1c>)
 80002e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002e6:	6013      	str	r3, [r2, #0]

 }
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000e100 	.word	0xe000e100

080002f8 <Pending_REG>:
 void Pending_REG(char PinNum)
 {
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	71fb      	strb	r3, [r7, #7]
	 *(EXTI_PR)|=(0x01<<PinNum);
 8000302:	4b08      	ldr	r3, [pc, #32]	; (8000324 <Pending_REG+0x2c>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	79fa      	ldrb	r2, [r7, #7]
 8000308:	2101      	movs	r1, #1
 800030a:	fa01 f202 	lsl.w	r2, r1, r2
 800030e:	4611      	mov	r1, r2
 8000310:	4a04      	ldr	r2, [pc, #16]	; (8000324 <Pending_REG+0x2c>)
 8000312:	430b      	orrs	r3, r1
 8000314:	6013      	str	r3, [r2, #0]
 }
 8000316:	bf00      	nop
 8000318:	370c      	adds	r7, #12
 800031a:	46bd      	mov	sp, r7
 800031c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000320:	4770      	bx	lr
 8000322:	bf00      	nop
 8000324:	40013c14 	.word	0x40013c14

08000328 <GPIO_Init>:

void GPIO_Init(unsigned char PortID, unsigned char PinNum, unsigned char PinMode,
               unsigned char DefaultState) {
 8000328:	b490      	push	{r4, r7}
 800032a:	b082      	sub	sp, #8
 800032c:	af00      	add	r7, sp, #0
 800032e:	4604      	mov	r4, r0
 8000330:	4608      	mov	r0, r1
 8000332:	4611      	mov	r1, r2
 8000334:	461a      	mov	r2, r3
 8000336:	4623      	mov	r3, r4
 8000338:	71fb      	strb	r3, [r7, #7]
 800033a:	4603      	mov	r3, r0
 800033c:	71bb      	strb	r3, [r7, #6]
 800033e:	460b      	mov	r3, r1
 8000340:	717b      	strb	r3, [r7, #5]
 8000342:	4613      	mov	r3, r2
 8000344:	713b      	strb	r3, [r7, #4]
	*(look_up[PortID][0]) &= ~(0x03 << 2 * PinNum);
 8000346:	79fa      	ldrb	r2, [r7, #7]
 8000348:	4956      	ldr	r1, [pc, #344]	; (80004a4 <GPIO_Init+0x17c>)
 800034a:	4613      	mov	r3, r2
 800034c:	009b      	lsls	r3, r3, #2
 800034e:	4413      	add	r3, r2
 8000350:	009b      	lsls	r3, r3, #2
 8000352:	440b      	add	r3, r1
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	6819      	ldr	r1, [r3, #0]
 8000358:	79bb      	ldrb	r3, [r7, #6]
 800035a:	005b      	lsls	r3, r3, #1
 800035c:	2203      	movs	r2, #3
 800035e:	fa02 f303 	lsl.w	r3, r2, r3
 8000362:	43db      	mvns	r3, r3
 8000364:	461c      	mov	r4, r3
 8000366:	79fa      	ldrb	r2, [r7, #7]
 8000368:	484e      	ldr	r0, [pc, #312]	; (80004a4 <GPIO_Init+0x17c>)
 800036a:	4613      	mov	r3, r2
 800036c:	009b      	lsls	r3, r3, #2
 800036e:	4413      	add	r3, r2
 8000370:	009b      	lsls	r3, r3, #2
 8000372:	4403      	add	r3, r0
 8000374:	681b      	ldr	r3, [r3, #0]
 8000376:	ea01 0204 	and.w	r2, r1, r4
 800037a:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][0]) |= PinMode << 2 * PinNum;
 800037c:	79fa      	ldrb	r2, [r7, #7]
 800037e:	4949      	ldr	r1, [pc, #292]	; (80004a4 <GPIO_Init+0x17c>)
 8000380:	4613      	mov	r3, r2
 8000382:	009b      	lsls	r3, r3, #2
 8000384:	4413      	add	r3, r2
 8000386:	009b      	lsls	r3, r3, #2
 8000388:	440b      	add	r3, r1
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	6819      	ldr	r1, [r3, #0]
 800038e:	797a      	ldrb	r2, [r7, #5]
 8000390:	79bb      	ldrb	r3, [r7, #6]
 8000392:	005b      	lsls	r3, r3, #1
 8000394:	fa02 f303 	lsl.w	r3, r2, r3
 8000398:	461c      	mov	r4, r3
 800039a:	79fa      	ldrb	r2, [r7, #7]
 800039c:	4841      	ldr	r0, [pc, #260]	; (80004a4 <GPIO_Init+0x17c>)
 800039e:	4613      	mov	r3, r2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	4413      	add	r3, r2
 80003a4:	009b      	lsls	r3, r3, #2
 80003a6:	4403      	add	r3, r0
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	ea41 0204 	orr.w	r2, r1, r4
 80003ae:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][1]) &= ~(1 << PinNum);
 80003b0:	79fa      	ldrb	r2, [r7, #7]
 80003b2:	493c      	ldr	r1, [pc, #240]	; (80004a4 <GPIO_Init+0x17c>)
 80003b4:	4613      	mov	r3, r2
 80003b6:	009b      	lsls	r3, r3, #2
 80003b8:	4413      	add	r3, r2
 80003ba:	009b      	lsls	r3, r3, #2
 80003bc:	440b      	add	r3, r1
 80003be:	3304      	adds	r3, #4
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	6819      	ldr	r1, [r3, #0]
 80003c4:	79bb      	ldrb	r3, [r7, #6]
 80003c6:	2201      	movs	r2, #1
 80003c8:	fa02 f303 	lsl.w	r3, r2, r3
 80003cc:	43db      	mvns	r3, r3
 80003ce:	461c      	mov	r4, r3
 80003d0:	79fa      	ldrb	r2, [r7, #7]
 80003d2:	4834      	ldr	r0, [pc, #208]	; (80004a4 <GPIO_Init+0x17c>)
 80003d4:	4613      	mov	r3, r2
 80003d6:	009b      	lsls	r3, r3, #2
 80003d8:	4413      	add	r3, r2
 80003da:	009b      	lsls	r3, r3, #2
 80003dc:	4403      	add	r3, r0
 80003de:	3304      	adds	r3, #4
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	ea01 0204 	and.w	r2, r1, r4
 80003e6:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][1])|= ((DefaultState & _OUTTYPE_MASK) >> _OUTTYPE_SHIFT) << PinNum;
 80003e8:	79fa      	ldrb	r2, [r7, #7]
 80003ea:	492e      	ldr	r1, [pc, #184]	; (80004a4 <GPIO_Init+0x17c>)
 80003ec:	4613      	mov	r3, r2
 80003ee:	009b      	lsls	r3, r3, #2
 80003f0:	4413      	add	r3, r2
 80003f2:	009b      	lsls	r3, r3, #2
 80003f4:	440b      	add	r3, r1
 80003f6:	3304      	adds	r3, #4
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	6819      	ldr	r1, [r3, #0]
 80003fc:	793b      	ldrb	r3, [r7, #4]
 80003fe:	f003 0201 	and.w	r2, r3, #1
 8000402:	79bb      	ldrb	r3, [r7, #6]
 8000404:	fa02 f303 	lsl.w	r3, r2, r3
 8000408:	461c      	mov	r4, r3
 800040a:	79fa      	ldrb	r2, [r7, #7]
 800040c:	4825      	ldr	r0, [pc, #148]	; (80004a4 <GPIO_Init+0x17c>)
 800040e:	4613      	mov	r3, r2
 8000410:	009b      	lsls	r3, r3, #2
 8000412:	4413      	add	r3, r2
 8000414:	009b      	lsls	r3, r3, #2
 8000416:	4403      	add	r3, r0
 8000418:	3304      	adds	r3, #4
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	ea41 0204 	orr.w	r2, r1, r4
 8000420:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][2]) &= ~(0x03 << 2 * PinNum);
 8000422:	79fa      	ldrb	r2, [r7, #7]
 8000424:	491f      	ldr	r1, [pc, #124]	; (80004a4 <GPIO_Init+0x17c>)
 8000426:	4613      	mov	r3, r2
 8000428:	009b      	lsls	r3, r3, #2
 800042a:	4413      	add	r3, r2
 800042c:	009b      	lsls	r3, r3, #2
 800042e:	440b      	add	r3, r1
 8000430:	3308      	adds	r3, #8
 8000432:	681b      	ldr	r3, [r3, #0]
 8000434:	6819      	ldr	r1, [r3, #0]
 8000436:	79bb      	ldrb	r3, [r7, #6]
 8000438:	005b      	lsls	r3, r3, #1
 800043a:	2203      	movs	r2, #3
 800043c:	fa02 f303 	lsl.w	r3, r2, r3
 8000440:	43db      	mvns	r3, r3
 8000442:	461c      	mov	r4, r3
 8000444:	79fa      	ldrb	r2, [r7, #7]
 8000446:	4817      	ldr	r0, [pc, #92]	; (80004a4 <GPIO_Init+0x17c>)
 8000448:	4613      	mov	r3, r2
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	4413      	add	r3, r2
 800044e:	009b      	lsls	r3, r3, #2
 8000450:	4403      	add	r3, r0
 8000452:	3308      	adds	r3, #8
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	ea01 0204 	and.w	r2, r1, r4
 800045a:	601a      	str	r2, [r3, #0]
	*(look_up[PortID][2]) |= ((DefaultState & _PUPD_MASK) >> _PUPD_SHIFT) << (2 * PinNum);
 800045c:	79fa      	ldrb	r2, [r7, #7]
 800045e:	4911      	ldr	r1, [pc, #68]	; (80004a4 <GPIO_Init+0x17c>)
 8000460:	4613      	mov	r3, r2
 8000462:	009b      	lsls	r3, r3, #2
 8000464:	4413      	add	r3, r2
 8000466:	009b      	lsls	r3, r3, #2
 8000468:	440b      	add	r3, r1
 800046a:	3308      	adds	r3, #8
 800046c:	681b      	ldr	r3, [r3, #0]
 800046e:	6819      	ldr	r1, [r3, #0]
 8000470:	793b      	ldrb	r3, [r7, #4]
 8000472:	105b      	asrs	r3, r3, #1
 8000474:	f003 0203 	and.w	r2, r3, #3
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	005b      	lsls	r3, r3, #1
 800047c:	fa02 f303 	lsl.w	r3, r2, r3
 8000480:	461c      	mov	r4, r3
 8000482:	79fa      	ldrb	r2, [r7, #7]
 8000484:	4807      	ldr	r0, [pc, #28]	; (80004a4 <GPIO_Init+0x17c>)
 8000486:	4613      	mov	r3, r2
 8000488:	009b      	lsls	r3, r3, #2
 800048a:	4413      	add	r3, r2
 800048c:	009b      	lsls	r3, r3, #2
 800048e:	4403      	add	r3, r0
 8000490:	3308      	adds	r3, #8
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	ea41 0204 	orr.w	r2, r1, r4
 8000498:	601a      	str	r2, [r3, #0]
}
 800049a:	bf00      	nop
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bc90      	pop	{r4, r7}
 80004a2:	4770      	bx	lr
 80004a4:	20000000 	.word	0x20000000

080004a8 <main>:
  for (i = 0; i < 30000; i++){}
}


int main(void)
{
 80004a8:	b580      	push	{r7, lr}
 80004aa:	af00      	add	r7, sp, #0


  GPIO_EnableClock(0);
 80004ac:	2000      	movs	r0, #0
 80004ae:	f7ff fe91 	bl	80001d4 <GPIO_EnableClock>

  GPIO_Init(0,0, INPUT,PULL_UP);
 80004b2:	2302      	movs	r3, #2
 80004b4:	2200      	movs	r2, #0
 80004b6:	2100      	movs	r1, #0
 80004b8:	2000      	movs	r0, #0
 80004ba:	f7ff ff35 	bl	8000328 <GPIO_Init>
  GPIO_Init(0,1, OUTPUT,PUSH_PULL);
 80004be:	2300      	movs	r3, #0
 80004c0:	2201      	movs	r2, #1
 80004c2:	2101      	movs	r1, #1
 80004c4:	2000      	movs	r0, #0
 80004c6:	f7ff ff2f 	bl	8000328 <GPIO_Init>
	 SYSCFG_clock(14);
 80004ca:	200e      	movs	r0, #14
 80004cc:	f7ff fea2 	bl	8000214 <SYSCFG_clock>
	 Enable_External_Interrupt(0);
 80004d0:	2000      	movs	r0, #0
 80004d2:	f7ff feb7 	bl	8000244 <Enable_External_Interrupt>
	 Interrupt_Mask_REG(0);
 80004d6:	2000      	movs	r0, #0
 80004d8:	f7ff fece 	bl	8000278 <Interrupt_Mask_REG>
	 Falling_Edge(0);
 80004dc:	2000      	movs	r0, #0
 80004de:	f7ff fee3 	bl	80002a8 <Falling_Edge>
	  NVIC_INPUT();
 80004e2:	f7ff fef9 	bl	80002d8 <NVIC_INPUT>


 while (1)
 80004e6:	e7fe      	b.n	80004e6 <main+0x3e>

080004e8 <Toggle_LED>:
}
  return 0;
}

void Toggle_LED()
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0

*(look_up[0][4])^= 0x01<<1;
 80004ec:	4b06      	ldr	r3, [pc, #24]	; (8000508 <Toggle_LED+0x20>)
 80004ee:	691b      	ldr	r3, [r3, #16]
 80004f0:	681a      	ldr	r2, [r3, #0]
 80004f2:	4b05      	ldr	r3, [pc, #20]	; (8000508 <Toggle_LED+0x20>)
 80004f4:	691b      	ldr	r3, [r3, #16]
 80004f6:	f082 0202 	eor.w	r2, r2, #2
 80004fa:	601a      	str	r2, [r3, #0]
Pending_REG(0);
 80004fc:	2000      	movs	r0, #0
 80004fe:	f7ff fefb 	bl	80002f8 <Pending_REG>
}
 8000502:	bf00      	nop
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000000 	.word	0x20000000

0800050c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800050c:	b480      	push	{r7}
 800050e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000510:	e7fe      	b.n	8000510 <NMI_Handler+0x4>

08000512 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000512:	b480      	push	{r7}
 8000514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000516:	e7fe      	b.n	8000516 <HardFault_Handler+0x4>

08000518 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000518:	b480      	push	{r7}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800051c:	e7fe      	b.n	800051c <MemManage_Handler+0x4>

0800051e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800051e:	b480      	push	{r7}
 8000520:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000522:	e7fe      	b.n	8000522 <BusFault_Handler+0x4>

08000524 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000524:	b480      	push	{r7}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000528:	e7fe      	b.n	8000528 <UsageFault_Handler+0x4>

0800052a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000538:	b480      	push	{r7}
 800053a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800053c:	bf00      	nop
 800053e:	46bd      	mov	sp, r7
 8000540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000544:	4770      	bx	lr

08000546 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000546:	b480      	push	{r7}
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800054a:	bf00      	nop
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr

08000554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000558:	f000 f83e 	bl	80005d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}

08000560 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <SystemInit+0x20>)
 8000566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800056a:	4a05      	ldr	r2, [pc, #20]	; (8000580 <SystemInit+0x20>)
 800056c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000570:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	e000ed00 	.word	0xe000ed00

08000584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058a:	490e      	ldr	r1, [pc, #56]	; (80005c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a0:	4c0b      	ldr	r4, [pc, #44]	; (80005d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ae:	f7ff ffd7 	bl	8000560 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f000 f825 	bl	8000600 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b6:	f7ff ff77 	bl	80004a8 <main>
  bx  lr    
 80005ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80005bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80005c8:	08000668 	.word	0x08000668
  ldr r2, =_sbss
 80005cc:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80005d0:	2000004c 	.word	0x2000004c

080005d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>
	...

080005d8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80005dc:	4b06      	ldr	r3, [pc, #24]	; (80005f8 <HAL_IncTick+0x20>)
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	461a      	mov	r2, r3
 80005e2:	4b06      	ldr	r3, [pc, #24]	; (80005fc <HAL_IncTick+0x24>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4413      	add	r3, r2
 80005e8:	4a04      	ldr	r2, [pc, #16]	; (80005fc <HAL_IncTick+0x24>)
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028
 80005fc:	20000048 	.word	0x20000048

08000600 <__libc_init_array>:
 8000600:	b570      	push	{r4, r5, r6, lr}
 8000602:	4d0d      	ldr	r5, [pc, #52]	; (8000638 <__libc_init_array+0x38>)
 8000604:	4c0d      	ldr	r4, [pc, #52]	; (800063c <__libc_init_array+0x3c>)
 8000606:	1b64      	subs	r4, r4, r5
 8000608:	10a4      	asrs	r4, r4, #2
 800060a:	2600      	movs	r6, #0
 800060c:	42a6      	cmp	r6, r4
 800060e:	d109      	bne.n	8000624 <__libc_init_array+0x24>
 8000610:	4d0b      	ldr	r5, [pc, #44]	; (8000640 <__libc_init_array+0x40>)
 8000612:	4c0c      	ldr	r4, [pc, #48]	; (8000644 <__libc_init_array+0x44>)
 8000614:	f000 f818 	bl	8000648 <_init>
 8000618:	1b64      	subs	r4, r4, r5
 800061a:	10a4      	asrs	r4, r4, #2
 800061c:	2600      	movs	r6, #0
 800061e:	42a6      	cmp	r6, r4
 8000620:	d105      	bne.n	800062e <__libc_init_array+0x2e>
 8000622:	bd70      	pop	{r4, r5, r6, pc}
 8000624:	f855 3b04 	ldr.w	r3, [r5], #4
 8000628:	4798      	blx	r3
 800062a:	3601      	adds	r6, #1
 800062c:	e7ee      	b.n	800060c <__libc_init_array+0xc>
 800062e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000632:	4798      	blx	r3
 8000634:	3601      	adds	r6, #1
 8000636:	e7f2      	b.n	800061e <__libc_init_array+0x1e>
 8000638:	08000660 	.word	0x08000660
 800063c:	08000660 	.word	0x08000660
 8000640:	08000660 	.word	0x08000660
 8000644:	08000664 	.word	0x08000664

08000648 <_init>:
 8000648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800064a:	bf00      	nop
 800064c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800064e:	bc08      	pop	{r3}
 8000650:	469e      	mov	lr, r3
 8000652:	4770      	bx	lr

08000654 <_fini>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	bf00      	nop
 8000658:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800065a:	bc08      	pop	{r3}
 800065c:	469e      	mov	lr, r3
 800065e:	4770      	bx	lr
